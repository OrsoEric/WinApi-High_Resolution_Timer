/****************************************************************
**	OrangeBot Project
*****************************************************************
**        /
**       /
**      /
** ______ \
**         \
**          \
*****************************************************************
**	Str
*****************************************************************
**	String class does not allow to construct a string with given chars.
**	I make a minimal String class to do just that
**	I use it in combination with queue to stream strings
****************************************************************/

/****************************************************************
**	DESCRIPTION
****************************************************************
**
****************************************************************/

/****************************************************************
**	HISTORY VERSION
****************************************************************
**
****************************************************************/

/****************************************************************
**	KNOWN BUGS
****************************************************************
**
****************************************************************/

/****************************************************************
**	TODO
****************************************************************
**
****************************************************************/

/****************************************************************
**	INCLUDES
****************************************************************/

#include <iostream>
//Windows api
#include <windows.h>
//Utilities based on winapi system call
#include "winapi_utils.h"
//header
#include "winapi_timer.h"

/****************************************************************
**	NAMESPACES
****************************************************************/

using namespace std;

/****************************************************************
**	DEFINES
****************************************************************/

#ifndef TRUE
	#define TRUE 1
#endif

#ifndef FALSE
	#define FALSE 0
#endif

/****************************************************************
**	MACROS
****************************************************************/

/****************************************************************
**	PROTOTYPES
****************************************************************/

/****************************************************************
**	GLOBAL VARIABILE
****************************************************************/

/****************************************************************
**	FUNCTIONS
****************************************************************/

/****************************************************************
**	MAIN
****************************************************************
**	INPUT:
**	OUTPUT:
**	RETURN:
**	DESCRIPTION:
****************************************************************/

int main()
{
	///----------------------------------------------------------------
	///	STATIC VARIABILE
	///----------------------------------------------------------------

	///----------------------------------------------------------------
	///	LOCAL VARIABILE
	///----------------------------------------------------------------

	//register int t;

	//chronometer class based on windows performance counters
	Winapi_chrono chrono;
	//time reading
	float deltat;

	int cnt;

	///----------------------------------------------------------------
	///	CHECK AND INITIALIZATIONS
	///----------------------------------------------------------------

	chrono = Winapi_chrono();
	//start timer0
	chrono.start( 0 );
	//start timer1
	chrono.start( 1 );
	//calculate shortest time
	deltat = chrono.stop( 1 );
	//count the number of calls needed
	cnt = 1;
	while (deltat == 0.0)
	{
		deltat = chrono.stop( 1 );
		cnt++;
	}
	printf("shortest time: %f uS\n", 1000000.0* deltat );
	printf("calls needed to get shortest time: %d\n", cnt),
	//Stop timer1
	deltat = chrono.stop_start( 1 );
	printf("execution partial time: %f\n", deltat );

	///----------------------------------------------------------------
	///	BODY
	///----------------------------------------------------------------

	printf("OrangeBot Projects\n");
	printf("reya\n");

	///----------------------------------------------------------------
	///	FINALIZATIONS
	///----------------------------------------------------------------

	//
	deltat = chrono.stop( 1 );
	printf("execution time: %f\n", deltat );

	printf("Sleeping!\n");

	Sleep(1000);
	deltat = chrono.stop( 1 );
	printf("execution final time: %f\n", deltat );

    return 0;
}	//end function: main

/****************************************************************************
**
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

void f( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return;
}	//end function:
