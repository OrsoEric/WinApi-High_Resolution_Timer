/****************************************************************
**	OrangeBot  Project
*****************************************************************************
**        /
**       /
**      /
** ______ \
**         \
**          \
*****************************************************************************
**	Winapi Timer
*****************************************************************************
**	Author: 			Orso Eric
**	Creation Date:
**	Last Edit Date:
**	Revision:			1
**	Version:			0.1 ALFA
****************************************************************************/

/****************************************************************************
**	DESCRIPTION
*****************************************************************************
**	This class provides a wrapper to the queue timers.
**	It is meant to simply initialize a repeatable timer with callback.
**		WINAPI
**	This class is based upon the windows queue timers. As far as i understand
**	it's a special process inside the scheduler. system calls allow for
**	a very precise callback timer down to the time slice of the scheduler.
**	Using this function i discovered that the time slice in my windows is 5mS
**		ROUNDING
**	If i use a period of N*5mS, the timer is VERY precise.
**	I tested is using the windows performance counters.
**	If not, the queue timer will mantain the verage, but will call at nearest
**	multiple making the period irregular.
**	Example:
**	Period = 10mS
**	10.01mS	9.99mS 10mS		10mS ...
**	Period 0 8mS
**	10mS	5mS		5mS		10mS	5mS		10mS	5mS		5mS ...
**	i tried 65 and does 62 and 78
**	60 does 62 and 48. it's definitely more complex than this. maybe i shouldn't round
**		RELEASE
**	It can take a few seconds for the queue timers and all timers within to be released
**	They will be still called after the release call. Handle it.
****************************************************************************/

/****************************************************************************
**	HYSTORY VERSION
*****************************************************************************
**	V0.1
**		>class header and data structure
**		>creation of time queue and timer tested in project test_timer_queue
**		>Minimum time step is 5mS on my PC
**		>Made function to approximate frequency in N*timesteps.
****************************************************************************/

/****************************************************************************
**	KNOWN BUG
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	INCLUDE
****************************************************************************/

#include <iostream>
//Windows api
#include <windows.h>
//Utilities based on winapi system call
#include "winapi_utils.h"
//header
#include "winapi_timer.h"

/****************************************************************************
**	NAMESPACE
****************************************************************************/

using namespace std;

/****************************************************************************
**	GLOBAL VARIABILE
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	CONSTRUCTORS
*****************************************************************************
****************************************************************************/

/****************************************************************************
**	Empty Constructor
**
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

Winapi_timer::Winapi_timer( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Initialize class variables
	init_vars();

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return;
}	//end empty constructor

/****************************************************************************
**	Initialized constructor: frame rate
**	Winapi_timer | int, WAITORTIMERCALLBACK
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

Winapi_timer::Winapi_timer( int freq, WAITORTIMERCALLBACK callback )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//return flag
	bool f_ret;
	//period argument for the system call
	int period_ms;

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	//Initialize class variables
	init_vars();

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

		///Calculate period
	//calculate period in mS rounded to the nearest period step.
	period_ms = from_freq( freq );
	//if: bad period
	if (period_ms <= 0)
	{
		//source frequency was bad
		cerr << __FUNCTION__ << " ERR: input frequncy was bad: " << freq << endl;
		//fail
		return;
	}
		///Create timer
	//create th timer itself
	f_ret = born_timer( period_ms, callback );
	//if: fail
	if (f_ret == TRUE)
	{
		cerr << __FUNCTION__ << " CRIT ERR: failed to create timer!\n";
		//fail
		return;
	}

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return; //OK
}	//end constructor: Winapi_timer | int, WAITORTIMERCALLBACK

/****************************************************************************
*****************************************************************************
**	DESTRUCTORS
*****************************************************************************
****************************************************************************/

/****************************************************************************
**	Default Destructor
**
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

Winapi_timer::~Winapi_timer( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return;
}	//end empty constructor

/****************************************************************************
*****************************************************************************
**	GETTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	SETTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	TESTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	PUBLIC METHODS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	PRIVATE METHODS
*****************************************************************************
****************************************************************************/

/****************************************************************************
**	Private Method
**	init_vars | void
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
**	Initialize class vars to thir default value
****************************************************************************/

void Winapi_timer::init_vars( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//fast counter
	register int t;

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

		///Initialize class vars
	//Init timer queue handle
	g_timer_queue = INVALID_HANDLE_VALUE;
	//For: scan all possible timers
	for (t = 0;t < WINAPI_MAX_TIMERS;t++)
	{
		//Init timer handle
		g_timer[ t ] = INVALID_HANDLE_VALUE;
	}
	//Init number of timers active
	g_num_timer = 0;

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	return;	//OK
}	//end method: init_vars

/****************************************************************************
**	Public Method
**	born_timer_queue	| void
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
**	Create a timer queue
****************************************************************************/

bool Winapi_timer::born_timer_queue( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//temp handle
	HANDLE htmp = INVALID_HANDLE_VALUE;
	//return winapi error code
	DWORD err;

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

		///----------------------------------------------------------------
		///	CreateTimerQueue
		///----------------------------------------------------------------
		//	This function creates the thread that makes the callback

	//Create the timer queue
	htmp = CreateTimerQueue();
	//if: bad handle
    if (IS_BAD_HANDLE(htmp))
    {
		//Find out what went wrong
		err = GetLastError();
		//
		cerr << __FUNCTION__ << "ERR: failed to create HANDLE: timer_queue. code: " << err << endl;
		//Fail
        return TRUE;
    }

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	//Write back handle
	g_timer_queue = htmp;

	return FALSE;	//OK
}	//end method:	born_timer_queue	| void

/****************************************************************************
**	Private Method
**	born_timer	| int, WAITORTIMERCALLBACK
*****************************************************************************
**	PARAMETER:
**	RETURN:
**		FALSE: Everything is OK
**		TRUE:	Something went wrong. timer did not initialize.
**	DESCRIPTION:
**	Add a timer to the timer queue
**	If the tiemr queue does not exists, try and create it.
****************************************************************************/

bool Winapi_timer::born_timer( int period_ms, WAITORTIMERCALLBACK callback )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//Temp handle
	HANDLE timer_queue;
	HANDLE timer;
	//temp timer index
	int index;
	//return bool
	bool f_ret;
	//windows error code
	DWORD err;

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	//if: bad parameters
	if ((callback == NULL) || (period_ms <= 0))
	{
		cerr << __FUNCTION__ << " ERR: Bad input parameters!\n";
		return TRUE; //Fail
	}

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	//Fetch timerqueue
	timer_queue = g_timer_queue;
	//if: bad timer queue
	if (IS_BAD_HANDLE(timer_queue))
	{
		//Timer queue is not initialized. initialize her
		f_ret = Winapi_timer::born_timer_queue();
		//Fetch timerqueue
		timer_queue = g_timer_queue;
		//if: fail
		if ((f_ret == TRUE) || (IS_BAD_HANDLE(timer_queue)))
		{
			cerr << __FUNCTION__ << " CRIT ERR: failed to make a queue timer!!!\n";
			return TRUE; //Fail
		}
		//This is timer of index 0. First timer.
		index = 0;
	}	//if: bad timer queue
	//if: queue already exists
	else
	{
		//I'm adding one timer to the queue
		//The index is the current number of timers
		index = g_num_timer;
		//if: user tried to place more timers than allowed
		if (index >= WINAPI_MAX_TIMERS)
		{
			cerr << __FUNCTION__ << " CAP: too many timers in the queue. Increase WINAPI_MAX_TIMERS define.\n";
			//(TODO) release timer queeue
			//
			return TRUE; //Fail
		}
	}	//end if: queue already exists

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

		///----------------------------------------------------------------
		///	CreateTimerQueueTimer:
		///----------------------------------------------------------------
		//	Register a timer inside a TimerQueue. It's a thread that will make the callback.
		//	Most parameters are strightforward, but flags is particularly tricky.
		//	Flags is deeply related to the inner working of the scheduler and timer queue thread.
		//	NOTE: worker I/O threads do exsts in 2003 and XP, but not in Vista or later
		//		FLAGS:
		//	WT_EXECUTEDEFAUL (Default)		| 	The callback function is executed by a non worker I/O thread
		//	WT_EXECUTEINTIMERTHREAD			| 	The callback function is executed inside the TimerQueue thread.
		//										Best response, but can affect what's happening in the queue.
		//										Keep it short
		//	WT_EXECUTEINIOTHREAD			|	The callback function is executed by a worker I/O thread
		//	WT_EXECUTEINPERSISTENTTHREAD	|	executed by a thread that never terminates.
		//	WT_EXECUTELONGFUNCTION			|	The callbackk function can have a long wait inside it.
		//										helps the system decide how to execute the callback function
		//	WT_EXECUTEONLYONCE				|	Specify OneShot timer. period must be zero for this flag to be risen
		//	WT_TRANSFER_IMPERSONATION		| 	(?????????) wut? what are access tokens

		///Create First timer
    f_ret =
    CreateTimerQueueTimer
    (
		&timer,								//handle of the timer
		timer_queue,						//TimerQueue that will mak the callback
		(WAITORTIMERCALLBACK)callback,		//special functin pointer to the callback function to be executed
		(PVOID)NULL,						//Optional argument that can be sent to the callback function.
		0,									//Due Time [mS]. The first call will happen after this delay. Can be zero.
		period_ms,							//Period [mS]. The repeat time. If zero, the timer is one shot.
		0									//Flags. Deeply related to the inner working of the scheduler and timer queue thread.
	);
	//if: queuing the timer has failed
	if ( (f_ret == FALSE) || (IS_BAD_HANDLE(timer)))
	{
		//Find out what went wrong
		err = GetLastError();
		//
		cerr << __FUNCTION__ << "ERR: failed to create timer. Error code: " << err << endl;
		//Fail
        return TRUE;
	}

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	//Write back timer index
	g_num_timer = index;
	//write back handle
	g_timer[index] = timer;

	return FALSE;	//OK
}	//end method: born_timer	| int, WAITORTIMERCALLBACK



/****************************************************************************
**	Public Method
**	from_freq	| int
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
**	calculate delay in mS rounded to the nearest resolution
****************************************************************************/

int Winapi_timer::from_freq( int freq )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//temp period in milliseconds
	int period_ms;

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	//if: bad parameter
	if (freq <= 0)
	{
		cerr << __FUNCTION__ << " ERR: Silly you. A frequency cannot be zero or negatve...\n";
		return -1; //Fail
	}

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------
	//	Example
	//	(2*12) % (2 *5) = 4 | 4 < 5 | 10
	//	(2*14) % (2 *5) = 8 | 8 > 5	| 10


	#ifdef WINAPI_TIMER_ROUND
	int tmp;
	//first
	period_ms = 2 *1000 / freq;

	if (period_ms %(2 *WINAPI_TIME_STEP) < WINAPI_TIME_STEP)
	{
		period_ms /= (2 *WINAPI_TIME_STEP);

		period_ms *= WINAPI_TIME_STEP;
	}

	else
	{
		period_ms /= (2 *WINAPI_TIME_STEP);
		//round up
		period_ms++;

		period_ms *= WINAPI_TIME_STEP;
	}
	#else
	//Calculate period.
	period_ms = 1000 /freq;

	#endif

		///CAP Minimum time step
	//if: below minimum
	if (period_ms < WINAPI_TIME_STEP)
	{
		//cap to minimum
		period_ms = WINAPI_TIME_STEP;
	}

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	//period
	return period_ms;
}	//end method:	from_freq	| int

/****************************************************************************
**	Public Method
**
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

bool Winapi_timer::dummy( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	if (FALSE)
	{
		cerr << __FUNCTION__ << ":\n";
		return TRUE; //Fail
	}

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	return FALSE;	//OK
}	//end method:

/****************************************************************************
*****************************************************************************
**	CONSTRUCTORS
*****************************************************************************
****************************************************************************/

/****************************************************************************
**	Empty Constructor
**	Winapi_chrono | void
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

Winapi_chrono::Winapi_chrono( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Initialize class variables.
	init_vars();
	//Calculate system frequency.
	get_freq();

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return;
}	//end constructor: Winapi_chrono | void

/****************************************************************************
*****************************************************************************
**	DESTRUCTORS
*****************************************************************************
****************************************************************************/

/****************************************************************************
**	Default Destructor
**
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

Winapi_chrono::~Winapi_chrono( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return;
}	//end default destructor

/****************************************************************************
*****************************************************************************
**	SETTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	GETTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	TESTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	PUBLIC METHODS
*****************************************************************************
****************************************************************************/

/****************************************************************************
**	Public Method
**	get_freq | void
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
**	calculate system frequency
****************************************************************************/

void Winapi_chrono::get_freq( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//temp
	LARGE_INTEGER freq_tmp;

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	//get system frequency
	QueryPerformanceFrequency( &freq_tmp );

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//save
	g_freq = freq_tmp;

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	return;
}	//end method: get_freq | void

/****************************************************************************
**	Public Static Method
**	start | int
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
**	snap start of timer
****************************************************************************/

void Winapi_chrono::start( int index )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//temp
	LARGE_INTEGER time;

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	if ((index < 0) || (index > WINAPI_MAX_CHRONOS))
	{
		cerr << __FUNCTION__ << " ERR: bad chronometer index\n";
		return;
	}

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Fetch current time
	QueryPerformanceCounter( &time );
	//Save start
	g_start[index] = time;

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	return;
}	//end method: start | int

/****************************************************************************
**	Public Method
**	stop | int
*****************************************************************************
**	PARAMETER:
**	RETURN:
**
**	DESCRIPTION:
**	Stop time [index]. Get DeltaT in Seconds. Stop doesn't change start. Multiple stop refers to same start.
****************************************************************************/

float Winapi_chrono::stop( int index )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//Partial time
	float deltat;
	//temp frequency
	LARGE_INTEGER freq;
	//start time
	LARGE_INTEGER start;
	//Stop time.
	LARGE_INTEGER stop;

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	//If: bad paramter
	if ((index < 0) || (index > WINAPI_MAX_CHRONOS))
	{
		cerr << __FUNCTION__ << " ERR: bad chronometer index\n";
		return WINAPI_CHRONOS_ERR;
	}
	//If: frequency is somehow not initialized
	if (g_freq.QuadPart == 0)
	{
		//calculate systm frequency
		get_freq();
	}
	//if: start is not defined
	if (g_start[index].QuadPart == 0)
	{
		//stop without start.
		return 0.0;
	}

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	//fetch frequency
	freq = g_freq;
	//Fetch start
	start = g_start[index];
	//Get current time
	QueryPerformanceCounter( &stop );
	//Calculat time delay
	deltat = 1.0 *(stop.QuadPart -start.QuadPart) /freq.QuadPart;

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	return deltat;
}	//end method:	stop | int

/****************************************************************************
**	Public Method
**
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
**	Stop than start
****************************************************************************/

float Winapi_chrono::stop_start( int index )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//if start is not defined return 0.0 but still start
	bool f_nostart = FALSE;
	//Partial time
	float deltat;
	//temp frequency
	LARGE_INTEGER freq;
	//start time
	LARGE_INTEGER start;
	//Stop time.
	LARGE_INTEGER stop;

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	//If: bad paramter
	if ((index < 0) || (index > WINAPI_MAX_CHRONOS))
	{
		cerr << __FUNCTION__ << " ERR: bad chronometer index\n";
		return WINAPI_CHRONOS_ERR;
	}
	//If: frequency is somehow not initialized
	if (g_freq.QuadPart == 0)
	{
		//calculate systm frequency
		get_freq();
	}


	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	//fetch frequency
	freq = g_freq;

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Get current time
	QueryPerformanceCounter( &stop );

	//if: start was not called before
	if (g_start[index].QuadPart == 0)
	{
		//return delay 0.0
		deltat = 0.0;
	}
	else
	{
		//Fetch start
		start = g_start[index];
		//Calculat time delay
		deltat = 1.0 *(stop.QuadPart -start.QuadPart) /freq.QuadPart;
	}
	//stoptime becomes new start
	g_start[index] = stop;

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	return deltat;
}	//end method:

/****************************************************************************
*****************************************************************************
**	PRIVATE METHODS
*****************************************************************************
****************************************************************************/

/****************************************************************************
**	Private Method
**	init_vars | void
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
**	default initialization of class variables
****************************************************************************/

void Winapi_chrono::init_vars( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	//fast counter
	register int t;
	//I create a temp LARGE_INTEGER intialized to zero.
	LARGE_INTEGER zero = { 0 };

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	//Initialize system frequency
	g_freq = zero;
	//For: each timer start
	for (t = 0;t < WINAPI_MAX_CHRONOS;t++)
	{
		//Initialize start and stop
		g_start[t] = zero;
	}

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	return;
}	//end method: init_vars | void

/****************************************************************************
**	Public Method
**
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

bool Winapi_chrono::dummy( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	if (FALSE)
	{
		cerr << __FUNCTION__ << ":\n";
		return TRUE; //Fail
	}

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	return FALSE;	//OK
}	//end method:
